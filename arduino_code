//---------------------------------- LIBRARIES -----------------------------------------
//library for bluetooth communication
#include <Dabble.h>
//library for the ds3231 module real time clock
#include <DS3231.h>

//---------------------------------- PIN LAYOUTS -----------------------------------------
//pins for motors
#define motorA_1 22
#define motorA_2 23
#define motorB_1 24
#define motorB_2 25
#define motorC_1 26
#define motorC_2 27

#define motorA_ena 2
#define motorB_ena 3
#define motorC_ena 4

//pins for temperture sensors
#define temp1_pin A0
#define temp2_pin A1
#define temp3_pin A2

//pin for vibration sensor
#define vibration_pin A3

//---------------------------------- Variables -----------------------------------------
DS3231  rtc(SDA, SCL);
Time time_0;

unsigned long tempLastTime = micros();
float tempDelay = 300; //the delay for checking temperture

int const maxSpeed = 255;

int vibrationState = 1;

float temp1;
float temp2;
float temp3;
float Vo;
float const r1 = 10000;
float const c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
float logR2, r2, t, tc;

//custom variables for bluetooth communication (not sure if i will use it)
//#define CUSTOM_SETTINGS
//#define INCLUDE_TERMINAL_MODULE

String Serialdata = "";
bool dataflag = 0;

bool limiswitch_0; //up
bool limitswitch_1; //down
bool limitswitch_2; //left
bool limitswitch_3; //right

void setup() {

  Serial.begin(115200); //Communication setup for ds3231 module
  Serial.begin(9600); //Commuincation setup for Serial terminal
  Dabble.begin(9600); //Communication setup for Bluetooth module

  delay(100);

  rtc.begin();
  //The following commands will only run once to set the actual date for the ds3231 module
  //rtc.setDOW(WEDNESDAY);
  //rtc.setTime(5, 30, 0);
  //rtc.setDate(19, 9, 2021);
  
  pinMode(motorA_1, OUTPUT);
  pinMode(motorA_2, OUTPUT);
  pinMode(motorB_1, OUTPUT);
  pinMode(motorB_2, OUTPUT);
  pinMode(motorC_1, OUTPUT);
  pinMode(motorC_2, OUTPUT);

  pinMode(motorA_ena, OUTPUT);
  pinMode(motorB_ena, OUTPUT);
  pinMode(motorC_ena, OUTPUT);

  pinMode(temp1_pin, INPUT);
  pinMode(temp2_pin, INPUT);
  pinMode(temp3_pin, INPUT);

  pinMode(vibration_pin, INPUT);
}

void loop() {
  
  updateTime(false);
  
  loop_BT();
  loop_Temp();
}

//Setting the speed of the motor
void setSpeed(uint8_t motor, int speed){

  if(speed > maxSpeed)
  {
    speed = maxSpeed;
  }

  analogWrite(motor, speed);
}

//setting the direction of the motor
void setDirection(uint8_t pin1, uint8_t pin2, int dir)
{
  if(dir == 0){

    digitalWrite(pin1, HIGH);
    digitalWrite(pin2, LOW);
  }else if(dir == 1){

    digitalWrite(pin1, LOW);
    digitalWrite(pin2, HIGH);
  }else {
   
    digitalWrite(pin1, LOW);
    digitalWrite(pin2, LOW);
  }
}

//This method is being called in the loop which checks for terminal data via smartphone.
void loop_BT()
{
  Dabble.processInput();
  while (Serial.available() != 0)
  {
    Serialdata = String(Serialdata + char(Serial.read()));
    dataflag = 1;
  }
  if (dataflag == 1)
  {
    Terminal.print(Serialdata);
    Serialdata = "";
    dataflag = 0;
  }
  if(Terminal.available())
  {
    while (Terminal.available() != 0)
    {
      Serial.write(Terminal.read());
    }
    Serial.println();
  }
}

//updating temperture readings
void loop_Temp()
{
  if(micros() - tempLastTime >= tempDelay)
  {
    temp1 = proccessTemp(temp1_pin);
    temp2 = proccessTemp(temp2_pin);
    temp3 = proccessTemp(temp3_pin);
    
    tempLastTime = micros();
  }
}

//This method will proccess the the value obtained from the temp pins into temperture
float proccessTemp(uint8_t pin)
{
  Vo = analogRead(pin);
  r2 = r1 * (1023.0 / (float)Vo - 1.0);
  logR2 = log(r2);
  t = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));

  return t - 273.15;
}

//This method will get the current time from ds3231 module. bool = true --> print time on terminal (for debugging purpose)
void updateTime(bool print)
{
  time_0 = rtc.getTime();

  if(print)
  {
    Serial.print(rtc.getDOWStr());
    Serial.print(" ");
  
    Serial.print(rtc.getDateStr());
    Serial.print(" -- ");
    Serial.println(rtc.getTimeStr()); 
  }
}

void loop_Vibration()
{
  vibrationState = digitalRead(vibration_pin);

  if(vibrationState == 1)
  {
    completeStop();
  }else
  {
    //ignore
  }
}

void completeStop()
{
    //turn off motors and brake
}
