/*
 * 
 * 
 * 
 * 
 * 
 */

// include the library code:
#define CUSTOM_SETTINGS
#define INCLUDE_GAMEPAD_MODULE
#include <Dabble.h>
#include <LiquidCrystal.h>
#include <Wire.h>
#include "RTClib.h"
#include <OneWire.h>
#include <DallasTemperature.h>

#define buzzer 10

#define ONE_WIRE_BUS 2

#define R_PWM0 2
#define L_PWM0 3

#define R_PWM1 4
#define L_PWM1 5

#define en0 6
#define en1 7

#define sensor0 9
#define sensor1 10

#define echo_0 48
#define echo_1 49

#define trig_0 50
#define trig_1 51

int deviceCount = 0;
float tempC;

int statusSenso;

const int sensorDistance = 15;

#define DATA_SIZE 45
char *saveptr;

char data_buffer[DATA_SIZE];

float v1, v2, v3;

// Setup a oneWire instance to communicate with any OneWire device
OneWire oneWire(ONE_WIRE_BUS);  

// Pass oneWire reference to DallasTemperature library
DallasTemperature sensors(&oneWire);

// initialize the library by associating any needed LCD interface pin
// with the arduino pin number it is connected to
const int rs = 24, en = 25, d4 = 26, d5 = 27, d6 = 28, d7 = 29;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

RTC_DS3231 rtc;
DateTime now;
DateTime next;
DateTime last;

int interval_day = 0;
int interval_hour = 0;
int interval_minute = 5;
bool runSchedule = true;

bool isRunning = false;

bool printTime_ = false;
long lastTime;

long lastTime_;

bool runSensors = false;

bool returning = false;

char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

class Motor
{
  public:

    int maxSpeed = 255;

    int speed = 0; //current speed

    int RPWM;
    int LPWM;
    int en;

    void enable(bool en)
    {
      if(en)
      {
        digitalWrite(en, HIGH);
      }else{

        digitalWrite(en, LOW);
      }
    }
    
    void setSpeed(int s, bool reverse){

      int dspeed;
     
      if(s > maxSpeed){

        dspeed = maxSpeed;
      }else
      {
        dspeed = s;  
      }

      if(reverse)
      {
        analogWrite(RPWM, 0);
        analogWrite(LPWM, dspeed);
      }else{

        analogWrite(RPWM, dspeed);
        analogWrite(LPWM, 0);
      }

      speed = dspeed;
    }

    //returns 0 if clockwise/not moving.....or 1 if counter clockwise
    int getDirection()
    {
      if(speed >= 0 ){
        return 0;
      }else{
         return 1;
      }
    }

    bool isRunning(){

      if(speed = 0)
      {
        return false;
      }else
      {
        return true;
      }
    }

    void stop()
    {
      setSpeed(0, false);  
    }
};

Motor motor0, motor1;

void setup() {
  
  pinMode(buzzer, OUTPUT);
  pinMode(R_PWM0, OUTPUT);
  pinMode(L_PWM0, OUTPUT);
 
  pinMode(R_PWM1, OUTPUT);
  pinMode(L_PWM1, OUTPUT);

  pinMode(en0, OUTPUT);
  pinMode(en1, OUTPUT);
  
  //motor0 for brushes
  motor0.RPWM = R_PWM0;
  motor0.LPWM = L_PWM0;
  motor0.en = en0;
  motor0.maxSpeed = 40; //should give us 4-5 volts. it depends on the battery voltage so must be a bit higher

  //motor1 for movement
  motor1.RPWM = R_PWM1;
  motor1.LPWM = L_PWM1;
  motor1.en = en1;
  motor1.maxSpeed = 0;
  beep();
  
  Serial.begin(115200);

  initLCD();

  show("Init freya...", 0, 0, true);

  delay(500);
 
  show("Setting RTC...", 0, 0, true);
  if (! rtc.begin()) {
    show("Couldn't find RTC", 0, 0, true);
  }
 
  if (rtc.lostPower()) {
    show("RTC POWER LOST...", 0, 0, true);
 
    // Comment out below lines once you set the date & time.
    // Following line sets the RTC to the date & time this sketch was compiled
    //rtc.adjust(DateTime(2021, 12, 16, 5, 30, 0));
 
    // Following line sets the RTC with an explicit date & time
    // for example to set January 27 2017 at 12:56 you would call:
    // rtc.adjust(DateTime(2017, 1, 27, 12, 56, 0));
  }
  delay(1000);
  show("Done!", 0, 0, true);

  delay(500);
 
  show("Setting BT...!", 0, 0, true);

  //Dabble.begin(9600);

  //Dabble.begin("Freya");

  delay(1000);
 
  show("Done!", 0, 0, true);

  delay(500);
 
  updateLCD();

  lastTime = millis();
  lastTime_ = millis();

  updateTime();

  //next = now;

  //printTime();
  
  //setInterval(0, 0, 1);
  
  //printNext();
  
  Serial.println("Starting freya...");\

  digitalWrite(en0, HIGH);
  
  digitalWrite(en1, HIGH);
  
  //runCleaning();

  //sensor(0);
}

void loop() {
  
  //Dabble.processInput();
  //keyPressed();

  //prints time in serial every 1 second without using delays
  if(printTime_){
    
    if(millis() - lastTime > 1000){
      printTime();
      lastTime = millis();
    }
  }

  //grabs the time from RTC & Check schedule every second
  if(millis() - lastTime_ > 1000){
      updateTime();

      checkSchedule();
      
      lastTime_ = millis();
  }

  //checkSensors();

  terminal();
}

void keyPressed()
{
  //Serial.println("KEY PRESSED: ");
  if (GamePad.isUpPressed())
  {
    Serial.println("UP");
  }

  if (GamePad.isDownPressed())
  {
    Serial.println("DOWN");
  }

  if (GamePad.isLeftPressed())
  {
    Serial.println("Left");
  }

  if (GamePad.isRightPressed())
  {
    Serial.println("Right");
  }

  if (GamePad.isSquarePressed())
  {
    Serial.println("Square");
  }

  if (GamePad.isCirclePressed())
  {
    Serial.println("Circle");
  }

  if (GamePad.isCrossPressed())
  {
    Serial.println("Cross");
  }

  if (GamePad.isTrianglePressed())
  {
    Serial.println("Triangle");
  }

  if (GamePad.isStartPressed())
  {
    Serial.println("Start");
  }

  if (GamePad.isSelectPressed())
  {
    Serial.println("Select");
  }  
}

void updateTime()
{
  now = rtc.now();
}

void printTime()
{
   //updateTime();
   Serial.println("Current Time: ");
   Serial.print(now.year(), DEC);
   Serial.print('/');
   Serial.print(now.month(), DEC);
   Serial.print('/');
   Serial.print(now.day(), DEC);
   Serial.print(" (");
   Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
   Serial.print(") ");
   Serial.print(now.hour(), DEC);
   Serial.print(':');
   Serial.print(now.minute(), DEC);
   Serial.print(':');
   Serial.print(now.second(), DEC);
   Serial.println();
}

//24 hours format
void setInterval(int day, int hour, int minute)
{
  int h;
  int m;
 
  if(hour > 24)
  {
      interval_hour = 24;
  }else
  {
    interval_hour = hour;  
  }

  if(minute > 60)
  {
      interval_minute = 60;
  }else
  {
    interval_minute = minute;  
  }

  interval_day = day;
 
  updateTime();
  next = (now + TimeSpan(day, hour, minute, 0));
 
  Serial.println("Cleaning interval has been set!");
  Serial.println();

  printNext();
}

void printNext()
{
  Serial.println("Next Time: ");
  Serial.print(next.year(), DEC);
  Serial.print('/');
  Serial.print(next.month(), DEC);
  Serial.print('/');
  Serial.print(next.day(), DEC);
  Serial.print(" (");
  Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
  Serial.print(") ");
  Serial.print(next.hour(), DEC);
  Serial.print(':');
  Serial.print(next.minute(), DEC);
  Serial.print(':');
  Serial.print(next.second(), DEC);
  Serial.println();
}

void beep()
{

  tone(buzzer, 1);
 
  delay(300);
 
  noTone(buzzer);
}

void show(String text, int col, int row, bool clear)
{
  if(clear)
  {
    lcd.clear();  
  }

  lcd.setCursor(col, row);

  lcd.print(text);
  Serial.println(text);
}

void initLCD()
{
  lcd.begin(16, 2);  
}

void updateLCD()
{
  if(canClean())
  {
    show("Ready!",0 ,0 , true);
  }
 
  if(!runSchedule)
  {
    show("Manual Mode",0 ,1 , false);
  }else
  {
    show("Clean in: ",0 ,1, false);
  }
}

void initCleaning()
{
  Serial.println("init cleaning...");
  isRunning = true;
  
  if(!canClean())
  {
    return;  
  }
  
  runCleaning();

  //delay(5000);

  //stopBrush();
}

/*
 * Check:
 * - Temperture
 * -
 */
bool canClean()
{
  Serial.println("Checking temperture...");

  return true;
  
}

void runCleaning()
{
  Serial.println("run cleaning...");

  isRunning = true;

  beep();
  //start brushes and then delay..
  //start moving...
  //detect edge...
  //stop brushes...
  //return back...
  
  startBrush();

  moveRight();

  if(sensors(0) == 1)
  {
    stopBrush();

    delay(5000);

    moveLeft();
  }

  //moveRight();
}

void stopCleaning()
{
  stopBrush();
  Serial.println("stop cleaning..."); 
}

void moveRight()
{
  Serial.println("Moving right...");
  motor1.setSpeed(motor1.maxSpeed, false);
}

void moveLeft()
{
  Serial.println("Moving left...");
  motor1.setSpeed(motor1.maxSpeed, true);

  if(sensor(1) == 1)
  {
    stopCleaning();  
  }
}

void stopMotor()
{
  Serial.println("Stopping...");
  motor1.setSpeed(0, true);  
}

void startBrush()
{
  Serial.println("Starting brush motors...");

  motor0.enable(true);
  motor0.setSpeed(motor0.maxSpeed, true);
}

void stopBrush()
{
  Serial.println("Stopping brush motors...");

  motor0.setSpeed(0, false);
  motor0.enable(false);
}

void checkSchedule()
{
  if(isRunning){

    return;
  }

  if(!runSchedule)
  {

    return;
  }

  //check if its time to clean
  if(now.day() == next.day()){
    
    if(now.hour() >= next.hour()){

      if(now.minute() >= next.minute()){

        initCleaning();
      }
    }
  }
}


bool sensor(int s)
{
  int trig;
  int echo;

  if(s == 0){

    trig = trig_0;
    echo = echo_0;
    //Serial.println("Sensor 0: ");
  }else
  {
    trig = trig_1;
    echo = echo_1;

    //Serial.println("Sensor 1: ");
  }

   long duration, cm;
   pinMode(trig, OUTPUT);
   digitalWrite(trig, LOW);
   delayMicroseconds(2);
   digitalWrite(trig, HIGH);
   delayMicroseconds(10);
   digitalWrite(trig, LOW);
   pinMode(echo, INPUT);
   duration = pulseIn(echo, HIGH);
   cm = microsecondsToCentimeters(duration);

   Serial.print(cm);
   Serial.println("cm");
}

long microsecondsToCentimeters(long microseconds) {
   return microseconds / 29 / 2;
}

void terminal()
{
    if (Serial.available() > 0)
  {
    memset(data_buffer, 0, sizeof(data_buffer));
    Serial.readBytes(data_buffer, DATA_SIZE);
    String commands = strtok_r(data_buffer, ",", &saveptr);

    Serial.println("command:");
    Serial.println(commands);


      char* errorCheck;
      v1 = (float) strtol(strtok_r(NULL, ",", &saveptr), &errorCheck, 10);
      v2 = (float) strtol(strtok_r(NULL, ",", &saveptr), &errorCheck, 10);
      v3 = (float) strtol(strtok_r(NULL, ",", &saveptr), &errorCheck, 10);
      
    if(commands == "S")
    {
      Serial.print("Checking sensor: ");
      Serial.print("ID: ");
      Serial.println(v1);

      int id = v1;

      sensor(id);

    }else if(commands == "M")
    {
      Serial.println("Setting motor: ");
      Serial.print("ID: ");
      Serial.print(v1);
      Serial.print(" ,Speed: ");
      Serial.print(v2);
      Serial.print(" ,Reverse: ");
      Serial.println(v3);

      if(v1 == 0)
      {
        motor0.setSpeed(v2, v3);
        motor0.enable(true);
      }else
      {
        motor1.setSpeed(v2, v3);
        motor1.enable(true);
      }

     // delay(2000);
      
      //motor0.setSpeed(0,0);
      motor1.setSpeed(0,0);
      motor1.enable(false);
      //motor0.enable(false);
    }
  }
}
